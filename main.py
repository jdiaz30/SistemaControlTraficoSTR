import asyncio
import subprocess
import sys
from simulacion_sensor import generar_data_trafico
from logica_trafico import calcular_tiempo_verde, store_data_trafico  

async def iniciar_semaforo():
    """
    Inicia la simulaci√≥n del sem√°foro ejecut√°ndolo como un proceso independiente.

    - Usa `asyncio.create_subprocess_exec()` para ejecutar `semaforo.py` en paralelo.
    - La funci√≥n `await process.wait()` permite que el proceso corra sin bloquear el resto del programa.
    - Maneja excepciones para evitar fallos si el proceso no se puede iniciar.
    """
    try:
        process = await asyncio.create_subprocess_exec(sys.executable, "semaforo.py")
        await process.wait()  # Espera a que el proceso termine (no bloquea el hilo principal)
    except FileNotFoundError:
        print("‚ùå Error: No se encontr√≥ el archivo `semaforo.py`. Verifica que el script existe.")
    except Exception as e:
        print(f"‚ùå Error inesperado al iniciar el sem√°foro: {e}")

async def control_semaforo():
    """
    Gestiona la simulaci√≥n del tr√°fico en m√∫ltiples intersecciones.

    - Recopila datos de tr√°fico en paralelo desde varios sensores.
    - Calcula el tiempo de luz verde en funci√≥n del n√∫mero de veh√≠culos detectados.
    - Almacena los datos en la base de datos de manera as√≠ncrona.
    - Maneja errores en la obtenci√≥n y procesamiento de los datos.
    """
    try:
        while True:
            sensor_ids = [1, 2, 3, 4]  # Lista de sensores simulados (uno por intersecci√≥n)
            tareas_sensores = [generar_data_trafico(sensor_id) for sensor_id in sensor_ids]
            
            # Ejecuta todas las tareas de sensores en paralelo y espera los resultados
            try:
                datos_trafico = await asyncio.gather(*tareas_sensores)
            except Exception as e:
                print(f"‚ùå Error en la obtenci√≥n de datos de sensores: {e}")
                continue  # Si hay un error, contin√∫a con la siguiente iteraci√≥n

            # Procesa los datos de cada sensor de forma independiente
            for data_trafico in datos_trafico:
                try:
                    tiempo_verde = await calcular_tiempo_verde(data_trafico["vehicle_count"])  
                    await store_data_trafico(data_trafico["interseccion"], data_trafico["vehicle_count"], tiempo_verde)
                    print(f"‚úÖ Intersecci√≥n: {data_trafico['interseccion']} | Veh√≠culos: {data_trafico['vehicle_count']} | Verde por: {tiempo_verde} segundos")
                except Exception as e:
                    print(f"‚ùå Error procesando datos de tr√°fico para {data_trafico['interseccion']}: {e}")

            await asyncio.sleep(5)  # Pausa antes de la siguiente iteraci√≥n de lectura de sensores

    except Exception as e:
        print(f"‚ùå Error inesperado en la simulaci√≥n del tr√°fico: {e}")

async def main():
    """
    Coordina la ejecuci√≥n del sistema de control de tr√°fico.

    - Ejecuta el sem√°foro en paralelo al procesamiento de datos de tr√°fico.
    - Usa `asyncio.create_task()` para manejar ambas tareas sin bloqueo.
    - `asyncio.gather()` asegura que ambas tareas corran simult√°neamente.
    - Maneja errores en la ejecuci√≥n de las tareas principales.
    """
    try:
        tarea_semaforo = asyncio.create_task(iniciar_semaforo())  # Ejecuta el sem√°foro en paralelo
        tarea_control_trafico = asyncio.create_task(control_semaforo())  # Ejecuta la simulaci√≥n de sensores

        await asyncio.gather(tarea_semaforo, tarea_control_trafico)  # Espera a que ambas tareas terminen
    except Exception as e:
        print(f"‚ùå Error cr√≠tico en la ejecuci√≥n del sistema: {e}")

if __name__ == "__main__":
    # Ejecuta el programa principal si el script se ejecuta directamente.
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        print("\nüõë Simulaci√≥n detenida manualmente.")
    except Exception as e:
        print(f"‚ùå Error inesperado al ejecutar el programa: {e}")
